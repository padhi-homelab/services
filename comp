#!/usr/bin/env bash
# shellcheck disable=SC2016,SC2034,SC2068,SC2154,SC2317 source=/dev/null

set -Eumo pipefail

SELF_DIR="$(cd -P -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd -P)"

LIB_DIR="$SELF_DIR/.lib"
SCRIPTS_DIR="$SELF_DIR/_scripts"
PREREQS_FILENAME="pre.reqs"
PREREQS_OVERRIDE_FILENAME="pre.override.reqs"

DOCKER_CMD="docker"
DOCKER_COMPOSE_CMD="$DOCKER_CMD compose"
YQ_CMD="yq"

FINAL_EXIT_CODE=0
EXIT_CODE_GENERIC_ERROR=1

EXIT_CODE_USAGE_ERROR=250
EXIT_CODE_OPTIONS_CONF_ERROR=240
EXIT_CODE_DEP_INSTALL_FAILURE=230
EXIT_CODE_COMPOSITION_NOT_FOUND=220

EXIT_CODE_SETUP_ERROR=10
EXIT_CODE_PRE_HOOK_SCRIPT_ERROR=100
EXIT_CODE_SIMPLE_VERB_FAILURE=110
EXIT_CODE_POST_HOOK_SCRIPT_ERROR=120

FLAG_FAIL_FAST=""
FLAG_SKIP_OVERRIDES=""
FLAG_SKIP_PREREQS=""
FLAG_SKIP_REGENERATE=""

OPTION_DEVICES=""
OPTION_HOOKS=""
OPTION_LABELS=""
OPTION_LOGGING=""
OPTION_PORTS=""

: "${COMP_INTERNAL_CALL:=}"

source "$SCRIPTS_DIR/colors.sh"

# # # # # # # # # # # # # # # # # # #     HELPER ROUTINES     # # # # # # # # # # # # # # # # # # #

__append_env_from () {
  if [ -f "$1" ] ; then
    if ! ( set -a && source .env && "$1" ) >> .env ; then
      local script_file="${1/#./$comp}"
      echo "'${script_file#"$SELF_DIR"/}' FAILED!" ; return 1
    fi
  fi
}

__CALL_SELF__ () {
  local cur_dir="$(pwd)"
  cd "$SELF_DIR"
  COMP_INTERNAL_CALL=1 bash "$0" "$@"
  local exit_code=$?
  cd "$cur_dir"
  return $exit_code
}

__create_external_networks () {
  local EXTERNAL_NETWORKS=( )
  for yml in "$@" ; do
    for ext_net in $($YQ_CMD -M '.networks | with_entries(select(.value.external == true)) | keys | .[]' "$yml") ; do
      # NOTE: `echo ... | xargs` to get rid of quotes around network name during extraction via `yq`.
      EXTERNAL_NETWORKS+=( $(echo "$ext_net" | xargs) )
    done
  done

  for ext_net in $(printf "%s\n" "${EXTERNAL_NETWORKS[@]}" | sort -u) ; do
    "$SCRIPTS_DIR/create-network.sh" "$ext_net" || return 1
  done
}

__do_prereqs () {
  [ "$FLAG_SKIP_PREREQS" != "yes" ] || return 0
  [ -f "$PREREQS_FILENAME" ] || return 0

  local verb="$1"
  local ensure_running="${2:-no}"
  while IFS= read -r prereq_comp_dir ; do
    if [ "$verb" = "status" ] ; then
      if ! __CALL_SELF__ status -F "$prereq_comp_dir" ; then
        [ "$ensure_running" = "yes" ] || return 1
        __CALL_SELF__ up -F "$prereq_comp_dir" || return 1
      fi
    else
      __CALL_SELF__ "$verb" -F "$prereq_comp_dir" || return 1
    fi
  done < <(cat "$PREREQS_FILENAME" "$PREREQS_OVERRIDE_FILENAME" 2>/dev/null)
}

__error () {
  echo "${_fg_red_}${_bold_}[X] ERROR${_normal_}: $1" >&2
}

__gen_env () {
  [ ! -f .env ] || [ "$FLAG_SKIP_REGENERATE" != "yes" ] || return 0
  rm -rf .env

  printf "[*] Generating '.env': "
  cp "$SELF_DIR/static.global.env" .env || return 1
  if [ "$FLAG_SKIP_OVERRIDES" != "yes" ] && [ -f "$SELF_DIR/static.global.override.env" ] ; then
    cat "$SELF_DIR/static.global.override.env" >> .env || return 1
  fi

  __append_env_from "$SELF_DIR/dynamic.global.env.sh" || return 1
  [ "$FLAG_SKIP_OVERRIDES" = "yes" ] || \
    __append_env_from "$SELF_DIR/dynamic.global.override.env.sh" || return 1

  [ ! -f "./static.env" ] || cat "./static.env" >> .env || return 1
  [ "$FLAG_SKIP_OVERRIDES" = "yes" ] || \
    [ ! -f "./static.override.env" ] || cat "./static.override.env" >> .env || return 1

  __append_env_from "./dynamic.env.sh" || return 1
  [ "$FLAG_SKIP_OVERRIDES" = "yes" ] || \
    __append_env_from "./dynamic.override.env.sh" || return 1

  echo OK
}

__gen_templates () {
  find ./extra -name '*.template.*' 2>/dev/null | grep -q . || return 0
  echo "[~] Verifying templated files ..."

  while IFS= read -r template_file ; do
    local generated_file="./generated${template_file#./extra}"
    mkdir -p "$(dirname "$generated_file")"
    generated_file="${generated_file/.template/}"
    if [ ! -f "$generated_file" ] || [ "$FLAG_SKIP_REGENERATE" != "yes" ] ; then
      "$SCRIPTS_DIR/generate-and-verify.sh" "$template_file" "$generated_file" \
        || return 1
    fi
  done < <(find ./extra -name '*.template.*')
}

__grab_ps () {
  # FIXME: `podman` doesn't print health status!
  local _ps_res="$( $DOCKER_CMD ps \
    --format '{{.Label "com.docker.compose.service"}}\t{{.Status}}' \
    --filter label=com.docker.compose.project=$comp \
  )"
  eval "$1"='$_ps_res'
}

__maybe_fail_fast () {
  [ "$FLAG_FAIL_FAST" != "yes" ] || exit "$1"

  if [ "$FINAL_EXIT_CODE" -eq 0 ] ; then
    FINAL_EXIT_CODE=$1
  elif [ "$FINAL_EXIT_CODE" -ne "$1" ] ; then
    FINAL_EXIT_CODE=$EXIT_CODE_GENERIC_ERROR
  fi

  return "$1"
}

__read_option () {
  local OPTION="OPTION_$1"
  local OVERRIDE_OPTION=""

  if [ -z "${!OPTION}" ] && [ "$FLAG_SKIP_OVERRIDES" != "yes" ]; then
    OVERRIDE_OPTION="$(grep -s "$1" options.override.conf | cut -d= -f2)"
    if [ -n "$OVERRIDE_OPTION" ] ; then
      validate_and_set_option "$OVERRIDE_OPTION" "$1" override || return 1
    fi
  fi
  [ -n "${!OPTION}" ] || printf -v "$OPTION" "%s" "yes"

  if [ "${!OPTION}" != "yes" ] ; then 
    echo -n "$opt_line_head: $1 "
    [ -z "$OVERRIDE_OPTION" ] && printf "(arg) " || printf "(conf) "
    opt_line_head=''
  else
    if [ -f "docker-compose.${1,,}.yml" ] ; then
      COMPOSE_FILES+=( "docker-compose.${1,,}.yml" )
      if [ "$FLAG_SKIP_OVERRIDES" != "yes" ] && [ -f "docker-compose.${1,,}.override.yml" ] ; then
        COMPOSE_FILES+=( "docker-compose.${1,,}.override.yml" )
      fi
    fi
  fi
}

__run_hooks () {
  local stage="$1"
  [ -z "${2:-}" ] || stage="$1.$2"
  ls docker-compose."$stage"_hook*.sh &> /dev/null || return 0
  [ -n "${2:-}" ] && echo "[>] Running '$2' hooks for '$1' ..." \
                  || echo "[>] Running '$1' hooks ..."

  if ! ( set -a && source .env && ./docker-compose."$stage"_hook.sh ) ; then
    __error "HOOK 'docker-compose.${stage}_hook.sh' FAILED!" ; return 1
  fi

  if [ "$FLAG_SKIP_OVERRIDES" != "yes" ] ; then
    while IFS= read -r hook_file ; do
      if ! ( set -a && source .env && "$hook_file" ) ; then
        __error "HOOK '${hook_file#./}' FAILED!" ; return 1
      fi
    done < <(find . -maxdepth 1 -type f -name "docker-compose.${stage}_hook.override*.sh")
  fi
}

__verify_volumes () {
  local mounted_volumes=( )
  for yml in "$@" ; do
    for vol in $($YQ_CMD -M '.services.[] | with_entries(select(.key == "volumes")) | .[] | .[] as $v | $v' "$yml") ; do
      case $vol in
        ./* | /* ) mounted_volumes+=( "$vol" ) ;;
               * ) ;;
      esac
    done
  done

  for vol in $(printf "%s\n" "${mounted_volumes[@]}" | sort -u) ; do
    vol="$(echo "$vol" | cut -d: -f1)"
    if ! [ -e "$vol" ] ; then
      __error "VOLUME PATH '${vol/#./$comp}' NOT FOUND!" ; return 1
    fi
  done
}

__will_invoke_compose () {
  [ "$1" = "down" ] || [ "$1" = "pull" ] || [ "$1" = "up" ]
}

# # # # # # # # # # # # # # # # # # #     TOP-LEVEL VERBS     # # # # # # # # # # # # # # # # # # #

do_validate () {
  [ "${1:-}" = "shallow" ] || __do_prereqs validate || return 1

  if echo "$comp" | grep -q '\.'; then
    __error "$DOCKER_COMPOSE_CMD will use '${comp//.}' as project name."
    return 1
  fi

  printf '[~] Validating service:'
  for svc in $("$YQ_CMD" -M '.services | keys | .[]' docker-compose.yml) ; do
    local attrs=( $("$YQ_CMD" -M ".services.\"$svc\" | keys | .[]" docker-compose.yml) )
    echo -n " $svc"
    for bad_attr in devices labels logging ports ; do
      if printf '%s\0' "${attrs[@]}" | grep -Fxqz -- $bad_attr ; then
        echo ; __error "'$bad_attr' for '$svc' should be in docker_compose.$bad_attr.yml."
        return 1
      fi
    done
  done
  echo
}

do_clean () {
  __grab_ps __ps_before_clean
  if [ -n "$__ps_before_clean" ] ; then
    __error "Cannot clean while ${_bold_}$comp${_normal_} is running!"
    return 1
  fi

  rm -rfv generated .env
  if [ -d data ] ; then
    echo -n "Remove '$comp/data' (y/N)? " ; read -r
    [[ $REPLY =~ ^[Yy]$ ]] || return 0
  fi
  rm -rfv data
}

do_down () {
  $DOCKER_COMPOSE_CMD down
}

do_overrides () {
  __do_prereqs overrides || return 1

  local any_override=''
  while IFS= read -r ofile ; do
    any_override='YES'
    printf '[G] ' ; realpath -s --relative-to="$(pwd)/.." "$ofile"
  done < <(find .. -maxdepth 1 -type f -iname '*override*')
  [ -n "$any_override" ] || echo '[-] No global override files.'

  any_override=''
  while IFS= read -r ofile ; do
    any_override='YES'
    printf '[L] ' ; realpath -s --relative-to="$(pwd)/.." "$ofile"
  done < <(find . -maxdepth 1 -type f -iname '*override*')
  [ -n "$any_override" ] || echo '[-] No local override files.'
}

do_pull () {
  __do_prereqs pull || return 1
  $DOCKER_COMPOSE_CMD pull
}

do_status () {
  __do_prereqs status || return 1

  __grab_ps __ps_before_status
  printf '[?] Querying service:'
  for svc in $( "$YQ_CMD" -M '.services | keys | .[]' docker-compose.yml ) ; do
    echo -n " $svc"
    if ! ( echo "$__ps_before_status" | grep "$svc" | grep -q healthy ) ; then
      echo ; __error "Unhealthy service: ${_fg_red_}$svc${_normal_}"
      return 1
    fi
  done
  echo
}

do_up () {
  __do_prereqs status "yes" || return 1
  $DOCKER_COMPOSE_CMD ${COMPOSE_FILES[@]/#/-f } up -d
}

# # # # # # # # # # # # # # # # # # #     OPTIONS PARSING     # # # # # # # # # # # # # # # # # # #

usage () {
  [ $# -eq 0 ] || echo -e "\nERROR: $1" >&2
  num_comps="$(\ls -1 */docker-compose.yml | wc -l)"
  compositions="$(\ls -Cdw100000 */docker-compose.yml | sed 's:\/[^[:space:]]*::g; s:[[:space:]]\+: :g' | fmt -56 | column -t)"
  echo -e "
Usage:
  $0 <verb>[,<verb>,...] [flags] <comp_dir> [<comp_dir> ...]

Verbs: (short forms within <>)
  <c>lean        Delete '<comp_dir>/data'
  <d>own         Stop a composition
  <o>verrides    List all override files in a composition
  <p>ull         Pull all images for a composition
  <s>tatus       Display health / status of a composition
  <u>p           Start a composition
  <v>alidate     Validate a composition

Flags:
  [-P | --skip-prereqs]      Ignore verifying/starting prerequisite compositions
  [-F | --fail-fast]         Fail on the first verb failure
  [-O | --skip-overrides]    Ignore overrides in scripts, environments, flags etc.
  [-R | --skip-regenerate]   Use existing '.env' and 'generated/'

Options:              { yes | no }
  [-d | --devices]    Attach devices listed in 'docker-compose.devices.yml'
  [-g | --logging]    Configure logging as specified in 'docker-compose.logging.yml'
  [-h | --hooks]      Run pre and post hook 'docker-compose.*.yml' scripts
  [-l | --labels]     Use labels specified in 'docker-compose.labels.yml'
  [-p | --ports]      Expose ports listed in 'docker-compose.ports.yml'

 <omitted> = Configure the option unless overridden in options.override.conf:
             use 'docker-compose.*.{sh,yml}' unless overriden in options.override.conf.
        no = Never configure the option (and use docker default instead):
             ignores 'docker-compose.*.{sh,yml}' files.
       yes = Always configure the option as specified:
             ignores options*.conf and uses all 'docker-compose.*.{sh,yml}' files.

Compositions Found ($num_comps):" >&2
  while IFS= read -r line ; do
    echo "  $line"
  done <<< "$compositions" >&2
  exit $EXIT_CODE_USAGE_ERROR
}

[ $# -gt 0 ] || usage

expand_verbs () {
  local expanded=""
  while read -rn1 char; do
    case "$char" in
      "c") expanded="$expanded clean" ;;
      "d") expanded="$expanded down" ;;
      "o") expanded="$expanded overrides" ;;
      "p") expanded="$expanded pull" ;;
      "s") expanded="$expanded status" ;;
      "u") expanded="$expanded up" ;;
      "v") expanded="$expanded validate" ;;
        *) return 1
    esac
  done < <(echo -n "$1")
  VERBS="$expanded"
}

VERBS="${1//,/ }"
for VERB in $VERBS ; do
  [ "$VERB" = "clean" ] || \
  [ "$VERB" = "down" ] || \
  [ "$VERB" = "overrides" ] || \
  [ "$VERB" = "pull" ] || \
  [ "$VERB" = "status" ] || \
  [ "$VERB" = "up" ] || \
  [ "$VERB" = "validate" ] || \
    expand_verbs "$VERBS" || \
    usage "Unknown verb: $VERB"
done
shift

for opt in "$@" ; do
  shift
  case "$opt" in
    "--fail-fast")       set -- "$@" "-F" ;;
    "--skip-prereqs")    set -- "$@" "-P" ;;
    "--skip-overrides")  set -- "$@" "-O" ;;
    "--skip-regenerate") set -- "$@" "-R" ;;

    "--devices")         set -- "$@" "-d" ;;
    "--hooks")           set -- "$@" "-h" ;;
    "--labels")          set -- "$@" "-l" ;;
    "--logging")         set -- "$@" "-g" ;;
    "--ports")           set -- "$@" "-p" ;;

    "--")                set -- "$@" "--" ;;
    "--"*)               usage "Unrecognized option: $opt." ;;
    *)                   set -- "$@" "$opt"
  esac
done

validate_and_set_option () {
  local OPTION="OPTION_$2"
  case "$1" in
    yes | no ) printf -v "$OPTION" "%s" "$1"
               return 0
  esac
  [ "$3" = "override" ] \
    && ( echo ; __error "Invalid value '$1' for '${2,,}' option in options.override.conf" ) \
    || usage "Invalid value '$1' for '${2,,}' option"
  return 1
}

OPTIND=1
while getopts ':FOPRd:g:h:l:p:' OPTION ; do
  case "$OPTION" in
    "F" ) FLAG_FAIL_FAST="yes" ;;
    "O" ) FLAG_SKIP_OVERRIDES="yes" ;;
    "P" ) FLAG_SKIP_PREREQS="yes" ;;
    "R" ) FLAG_SKIP_REGENERATE="yes" ;;

    "d" ) validate_and_set_option "$OPTARG" DEVICES usage ;;
    "g" ) validate_and_set_option "$OPTARG" LOGGING usage ;;
    "h" ) validate_and_set_option "$OPTARG" HOOKS usage ;;
    "l" ) validate_and_set_option "$OPTARG" LABELS usage ;;
    "p" ) validate_and_set_option "$OPTARG" PORTS usage ;;

      * ) usage "Unrecognized option: -$OPTARG." ;;
  esac
done
shift $((OPTIND -1))

if [ $# -le 0 ] ; then
  __error "No <comp_dir>' provided!"
  exit $EXIT_CODE_COMPOSITION_NOT_FOUND
fi

# # # # # # # # # # # # # # # # # # #       DEPENDENCIES      # # # # # # # # # # # # # # # # # # #
# FIXME: Improve `podman` support and make it default.

if ! $DOCKER_CMD version &> /dev/null ; then
  if ! podman version &> /dev/null ; then
    __error 'Failed to locate: `docker` or `podman`!'
    exit $EXIT_CODE_DEP_INSTALL_FAILURE
  else
    DOCKER_CMD="podman"
    DOCKER_COMPOSE_CMD="$DOCKER_CMD compose"
  fi
fi

if ! $DOCKER_COMPOSE_CMD version &> /dev/null ; then
  if ! command -v $DOCKER_CMD-compose &> /dev/null ; then
    if ! [ -x "$LIB_DIR/compose" ] ; then
      if ! "$SCRIPTS_DIR/install-compose.sh" "$LIB_DIR/compose" ; then
        __error 'Failed to locate: `'"$DOCKER_COMPOSE_CMD"'` or `'"$DOCKER_CMD"'-compose`!'
        exit $EXIT_CODE_DEP_INSTALL_FAILURE
      fi
    else
      DOCKER_COMPOSE_CMD="$LIB_DIR/compose"
    fi
  else
    DOCKER_COMPOSE_CMD="$DOCKER_CMD-compose"
  fi
fi

if ! command -v $YQ_CMD &> /dev/null ; then
  if ! [ -x "$LIB_DIR/yq" ] ; then
    if ! "$SCRIPTS_DIR/install-yq.sh" "$LIB_DIR/yq" ; then
      __error 'Failed to locate: `yq`!'
      exit $EXIT_CODE_DEP_INSTALL_FAILURE
    fi
  else
    YQ_CMD="$LIB_DIR/yq"
  fi
fi

# # # # # # # # # # # # # # # # # # #      MAIN FUNCTION      # # # # # # # # # # # # # # # # # # #

COMPOSITIONS=( "$@" )
perform () {
  local SIMPLE_VERB="$1"
  for comp in "${COMPOSITIONS[@]}" ; do
    comp="${comp%/}"
    echo -ne "\n${_fg_white_}${_bg_black_}${_bold_} ${SIMPLE_VERB:0:1} ${_normal_} Executing ${_bold_}$SIMPLE_VERB${_normal_} on "
    [ -z "$COMP_INTERNAL_CALL" ] || printf 'pre-req '
    echo "${_bold_}$comp${_normal_} ... "
    if ! { [ "$comp" = "$(basename "$comp")" ] && [ -d "$SELF_DIR/$comp" ]; } ; then
      __error "${_bold_}$comp${_normal_} is not a base directory at '$SELF_DIR'!"
      __maybe_fail_fast $EXIT_CODE_COMPOSITION_NOT_FOUND || continue
    fi
    if ! [ -f "$SELF_DIR/$comp/docker-compose.yml" ] ; then
      __error "No 'docker-compose.yml' found under ${_bold_}$comp${_normal_}!"
      __maybe_fail_fast $EXIT_CODE_COMPOSITION_NOT_FOUND || continue
    fi

    cd "$SELF_DIR/$comp"
    COMPOSE_FILES=( "docker-compose.yml" )
    if [ "$FLAG_SKIP_OVERRIDES" != "yes" ] && [ -f "docker-compose.override.yml" ] ; then
      COMPOSE_FILES+=( "docker-compose.override.yml")
    fi

    local opt_error=0
    opt_line_head='[o] Disabled options'
    for opt in DEVICES HOOKS LABELS LOGGING PORTS ; do
      __read_option $opt && continue
      opt_error=1
    done
    [ "$opt_error" -eq 0 ] \
      || __maybe_fail_fast $EXIT_CODE_OPTIONS_CONF_ERROR || continue
    [ -n "$opt_line_head" ] || echo

    [ "$SIMPLE_VERB" = "validate" ] || do_validate shallow

    if __will_invoke_compose "$SIMPLE_VERB" ; then
      __gen_env || __maybe_fail_fast $EXIT_CODE_SETUP_ERROR || continue
      __create_external_networks "${COMPOSE_FILES[@]}" \
        || __maybe_fail_fast $EXIT_CODE_SETUP_ERROR || continue
      __gen_templates \
        || __maybe_fail_fast $EXIT_CODE_SETUP_ERROR || continue
      [ "$OPTION_HOOKS" != "yes" ] || __run_hooks pre \
        || __maybe_fail_fast $EXIT_CODE_PRE_HOOK_SCRIPT_ERROR || continue
    fi

    [ "$OPTION_HOOKS" != "yes" ] || __run_hooks "$SIMPLE_VERB" pre \
      || __maybe_fail_fast $EXIT_CODE_PRE_HOOK_SCRIPT_ERROR || continue

    if __will_invoke_compose "$SIMPLE_VERB" ; then
      __verify_volumes "${COMPOSE_FILES[@]}" \
        || __maybe_fail_fast $EXIT_CODE_SETUP_ERROR || continue
    fi

    local verb_exit=0
    "do_${SIMPLE_VERB}" ; verb_exit=$?

    [ "$SIMPLE_VERB" != "validate" ] || [ $verb_exit -ne 0 ] || echo "[=] ${_bold_}$comp${_normal_} is valid!"
    [ "$SIMPLE_VERB" != "status" ]  || [ $verb_exit -ne 0 ]  || echo "[=] ${_bold_}$comp${_normal_} is healthy!"

    [ $verb_exit -eq 0 ] \
      || __maybe_fail_fast $EXIT_CODE_SIMPLE_VERB_FAILURE || continue

    if __will_invoke_compose "$SIMPLE_VERB" ; then
      [ "$OPTION_HOOKS" != "yes" ] || __run_hooks post \
        || __maybe_fail_fast $EXIT_CODE_POST_HOOK_SCRIPT_ERROR || continue
    fi

    [ "$OPTION_HOOKS" != "yes" ] || __run_hooks "$SIMPLE_VERB" post \
      || __maybe_fail_fast $EXIT_CODE_POST_HOOK_SCRIPT_ERROR
  done
}

print_sepator_line () {
  [ -n "$COMP_INTERNAL_CALL" ] || printf '%.0s-' {1..80}
}

print_sepator_line
for VERB in $VERBS ; do
  perform "$VERB"
  print_sepator_line
done
echo ; exit "$FINAL_EXIT_CODE"
