#!/usr/bin/env bash
# shellcheck disable=SC2016,SC2154,SC2155,SC2164,SC2317 source=/dev/null

set -Eumo pipefail

SELF_DIR="$(cd -P -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd -P)"
LIB_DIR="$SELF_DIR/.lib"
SCRIPTS_DIR="$SELF_DIR/_scripts"

source "$SCRIPTS_DIR/colors.sh"

COMP_SELF_CALL_REASON="${COMP_SELF_CALL_REASON:-}"
COMP_SELF_CALL_DEPTH="${COMP_SELF_CALL_DEPTH:-0}"

DOCKER_CMD=docker
DOCKER_COMPOSE_CMD="$LIB_DIR/compose"
YQ_CMD="$LIB_DIR/yq"

EXIT_CODE_GENERIC_ERROR=1

EXIT_CODE_USAGE_ERROR=250
EXIT_CODE_FRAGMENTS_ERROR=240
EXIT_CODE_DEP_FAILURE=230
EXIT_CODE_COMPOSITION_NOT_FOUND=220

EXIT_CODE_SETUP_ERROR=10
EXIT_CODE_PRE_HOOK_SCRIPT_ERROR=100
EXIT_CODE_VERB_FAILURE=110
EXIT_CODE_POST_HOOK_SCRIPT_ERROR=120

FLAG_FAIL_FAST=""
FLAG_SKIP_OVERRIDES=""
FLAG_SKIP_RELATED=""
FLAG_SKIP_GENERATE=""

FRAGMENT_DEVICES=""
FRAGMENT_HOOKS=""
FRAGMENT_LABELS=""
FRAGMENT_LOGGING=""
FRAGMENT_PORTS=""

# # # # # # # # # # # # # # # # # # #     HELPER ROUTINES     # # # # # # # # # # # # # # # # # # #

__append_env_from () {
  if [ -f "$1" ] ; then
    local script_file="${1/#./$_CUR_COMP_}"
    echo -n " ${script_file#"$SELF_DIR"/}"
    if bash -c "set -aeu ; source .env ; $1" > .env.add ; then
      cat .env.add >> .env ; rm .env.add
    else
      echo " ${_fg_red_}${_bold_}FAILED!${_normal_}" ; return 1
    fi
  fi
}

__CALL_SELF__ () {
  pushd "$SELF_DIR" > /dev/null
  local reason="$1" ; shift
  COMP_SELF_CALL_REASON="$reason" \
    COMP_SELF_CALL_DEPTH="$(( COMP_SELF_CALL_DEPTH + 1 ))" \
    bash "$0" "$@"
  local exit_code=$?
  popd > /dev/null
  return $exit_code
}

__create_external_networks () {
  local query='.networks | with_entries(select(.value.external == true)) | keys | .[]'
  local EXTERNAL_NETWORKS=( )
  for yml in "${_CUR_COMPOSE_FILES_[@]}" "${_CUR_COMPOSE_OVERRIDE_FILES_[@]}" ; do
    for ext_net in $( "$YQ_CMD" -M "$query" "$yml" ) ; do
      # NOTE: `echo ... | xargs` to get rid of quotes around network name during extraction via `yq`.
      EXTERNAL_NETWORKS+=( $(echo "$ext_net" | xargs) )
    done
  done

  for ext_net in $( printf "%s\n" "${EXTERNAL_NETWORKS[@]}" | sort -u ) ; do
    "$SCRIPTS_DIR/create-network.sh" "$ext_net" || return 1
  done
}

__do_ () {
  local reason="$1"
  local verb="$2"
  while IFS= read -r target_comp ; do
    # NOTE: Use `--skip-related` to avoid potential circular dependency:
    #       comp --[ pre_req ]--> target_comp --[ related ]--> comp
    __CALL_SELF__ "$reason" "$verb" --fail-fast --skip-related "$target_comp" || return 1
  done < <( "$YQ_CMD" "${_CUR_YQ_META_QUERY_PFX_} .$reason | .[]" meta.yml 2>/dev/null )
}

__error () {
  echo "${_fg_red_}${_bold_}[X] ERROR${_normal_}: $1" >&2
}

__gen_env () {
  [ ! -f .env ] || [ "$FLAG_SKIP_GENERATE" != yes ] || return 0
  rm -rf .env

  printf "[*] Generating '.env':"
  cp "$SELF_DIR/static.global.env" .env || return 1
  __append_env_from "$SELF_DIR/dynamic.global.env.sh" || return 1

  if [ "$FLAG_SKIP_OVERRIDES" != yes ] && [ -f "$SELF_DIR/static.global.override.env" ] ; then
    cat "$SELF_DIR/static.global.override.env" >> .env || return 1
  fi
  [ "$FLAG_SKIP_OVERRIDES" = yes ] || \
    __append_env_from "$SELF_DIR/dynamic.global.override.env.sh" || return 1

  [ ! -f static.env ] || cat static.env >> .env || return 1
  __append_env_from "./dynamic.env.sh" || return 1

  [ "$FLAG_SKIP_OVERRIDES" = yes ] || \
    [ ! -f static.override.env ] || cat static.override.env >> .env || return 1
  [ "$FLAG_SKIP_OVERRIDES" = yes ] || \
    __append_env_from "./dynamic.override.env.sh" || return 1

  env -i bash --norc --noprofile -c "set -aeu ; source .env ; env" \
    | sed 's;^\(_\|PWD\|SHLVL\)=.*$;;g' | grep . > .env.new
  mv .env.new .env

  echo " ${_fg_green_}DONE${_normal_}"
}

__gen_templates () {
  find ./extra -name '*.template*' 2>/dev/null | grep -q . || return 0
  echo "[*] Generating templated files ..."

  while IFS= read -r template_file ; do
    local generated_file="./generated${template_file#./extra}"
    mkdir -p "$(dirname "$generated_file")"
    generated_file="${generated_file/.template/}"
    if [ ! -f "$generated_file" ] || [ "$FLAG_SKIP_GENERATE" != yes ] ; then
      "$SCRIPTS_DIR/generate-and-verify.sh" "$template_file" "$generated_file" || return 1
    fi
  done < <(find ./extra -name '*.template*')
}

__grab_ps () {
  # FIXME: Best effort project name guessing without running compose.
  local proj="$_CUR_COMP_"
  ! [[ "$_CUR_COMP_" =~ ^_ ]] || proj=${proj:1}
  echo "$_CUR_COMP_" | grep -qv '\.' || proj=${proj//.}
  [ "$proj" = "$_CUR_COMP_" ] || __warning "Guessing project name to be $proj"

  # FIXME: `podman` doesn't print health status!
  local _ps_res="$( $DOCKER_CMD ps \
    --format '{{.Label "com.docker.compose.service"}}\t{{.Status}}' \
    --filter label=com.docker.compose.project="$proj" \
  )"
  eval "$1"='$_ps_res'
}

__maybe_fail_fast () {
  [ "$FLAG_FAIL_FAST" != yes ] || exit "$1"

  if [ "$_FINAL_EXIT_CODE_" -eq 0 ] ; then
    _FINAL_EXIT_CODE_=$1
  elif [ "$_FINAL_EXIT_CODE_" -ne "$1" ] ; then
    _FINAL_EXIT_CODE_=$EXIT_CODE_GENERIC_ERROR
  fi

  return "$1"
}

__print_sepator_line () {
  case "$COMP_SELF_CALL_DEPTH" in
    0 ) printf "%.0s–" {1..80} ;;
    1 ) printf "%.0s·" {1..80} ;;
    * ) ;;
  esac
}

__read_fragment () {
  local FRAGMENT="FRAGMENT_$1"
  local OVERRIDE_FRAGMENT=""

  if [ -z "${!FRAGMENT}" ] && [ "$FLAG_SKIP_OVERRIDES" != yes ]; then
    OVERRIDE_FRAGMENT="$( "$YQ_CMD" ".fragments.${1^^} // \"\"" meta.override.yml 2>/dev/null )"
    if [ -n "$OVERRIDE_FRAGMENT" ] ; then
      validate_and_set_fragment "$OVERRIDE_FRAGMENT" "$1" override || return 1
    fi
  fi
  [ -n "${!FRAGMENT}" ] || printf -v "$FRAGMENT" "%s" use

  if [ "${!FRAGMENT}" != use ] ; then 
    [ -z "$OVERRIDE_FRAGMENT" ] && _DISABLED_FRAGMENTS_+=("$1 (arg)") || _DISABLED_FRAGMENTS_+=("$1 (conf)")
  elif [ "$1" != HOOKS ] ; then
    if [ -f "compose.${1,,}.yml" ] ; then
      _CUR_COMPOSE_FILES_+=( "compose.${1,,}.yml" )
      if [ "$FLAG_SKIP_OVERRIDES" != yes ] && [ -f "compose.${1,,}.override.yml" ] ; then
        _CUR_COMPOSE_OVERRIDE_FILES_+=( "compose.${1,,}.override.yml" )
      fi
    fi
  fi
}

__run_hook () {
  ( set -aeu ; source "$SCRIPTS_DIR/colors.sh" ; source .env ; ./"$1" ) \
    || { __error "HOOK '$1' FAILED!" ; return 1 ; }
}

__run_hooks () {
  local stage="$1"
  [ -z "${2:-}" ] || stage="$1.$2"
  ls compose."$stage"_hook*.sh &> /dev/null || return 0
  [ -n "${2:-}" ] && echo "[>] Running '$2' hooks for '$1' ..." \
                  || echo "[>] Running '$1' hooks ..."

  [ ! -f "compose.${stage}_hook.sh" ] || __run_hook "compose.${stage}_hook.sh" || return 1

  if [ "$FLAG_SKIP_OVERRIDES" != yes ] ; then
    while IFS= read -r hook_file ; do
      __run_hook "$hook_file" || return 1
    done < <(find . -maxdepth 1 -type f -name "compose.${stage}_hook.override*.sh")
  fi
}

__show_message () {
  local stage="$1"
  [ -z "${2:-}" ] || stage="$1.$2"

  while IFS= read -r msg ; do
    echo -n "${_fg_white_}${_bg_magenta_}${_bold_} * ${_normal_} "
    _LINK_FONT_="${_fg_magenta_}${_uline_}" \
    _RESET_FONT_="${_normal_}" \
    _THIS_COMPOSITION_="${_bold_}${_CUR_COMP_}${_normal_}" \
      bash -c "set -aeu ; source .env ; echo \"$msg\""
  done < <( "$YQ_CMD" "${_CUR_YQ_META_QUERY_PFX_} .messages.$stage | .[]" meta.yml 2>/dev/null )
}

__verify_volumes () {
  local query='.services.[] | with_entries(select(.key == "volumes")) | .[] | .[] as $v | $v'
  local mounted_volumes=( )
  for yml in "${_CUR_COMPOSE_FILES_[@]}" "${_CUR_COMPOSE_OVERRIDE_FILES_[@]}" ; do
    for vol in $( "$YQ_CMD" -M "$query" "$yml" ) ; do
      case $vol in
        ./* | /* ) mounted_volumes+=( "$vol" ) ;;
               * ) ;;
      esac
    done
  done

  for vol in $(printf "%s\n" "${mounted_volumes[@]}" | sort -u) ; do
    vol="$(echo "$vol" | cut -d: -f1)"
    [ -e "$vol" ] || { __error "PATH '${vol/#./$_CUR_COMP_}' NOT FOUND!" ; return 1 ; }
  done
}

__warning () {
  echo "${_fg_yellow_}${_bold_}[W] WARNING${_normal_}: $1" >&2
}

__will_invoke_compose () {
  [ "$_CUR_VERB_" = down ] || [ "$_CUR_VERB_" = pull ] || [ "$_CUR_VERB_" = up ]
}

__will_do_pre_req () {
  [ "$_CUR_VERB_" != clean ] && [ "$_CUR_VERB_" != down ]
}

__will_do_related () {
  [ "$FLAG_SKIP_RELATED" != yes ] && __will_do_pre_req
}

# # # # # # # # # # # # # # # # # # #     TOP-LEVEL VERBS     # # # # # # # # # # # # # # # # # # #

do_validate () {
  local non_failing="${1:-}"
  local err=
  if [[ "$_CUR_COMP_" =~ ^_ ]] ; then
    if [ -n "$non_failing" ] ; then
      __warning "$DOCKER_COMPOSE_CMD drops leading '_' from project name."
    else
      __error "$DOCKER_COMPOSE_CMD drops leading '_' from project name." ; err=1
    fi
  fi
  if echo "$_CUR_COMP_" | grep -q '\.' ; then
    if [ -n "$non_failing" ] ; then
      __warning "$DOCKER_COMPOSE_CMD drops all '.' from project name."
    else
      __error "$DOCKER_COMPOSE_CMD drops all '.' from project name." ; err=1
    fi
  fi
  [ -z "$err" ] || return 1

  [ -n "$non_failing" ] || printf '[~] Validating service:'
  for svc in $("$YQ_CMD" -M '.services | keys | .[]' compose.yml) ; do
    local attrs=( $("$YQ_CMD" -M ".services.\"$svc\" | keys | .[]" compose.yml) )
    [ -n "$non_failing" ] || echo -n " $svc"
    for bad_attr in devices labels logging ports ; do
      if printf '%s\0' "${attrs[@]}" | grep -Fxqz -- $bad_attr ; then
        if [ -n "$non_failing" ] ; then
          echo ; __warning "Consider moving '$bad_attr' for '$svc' into docker_compose.$bad_attr.yml."
        else
          echo ; __error "'$bad_attr' for '$svc' should be in docker_compose.$bad_attr.yml." ; return 1
        fi
      fi
    done
  done
  [ -n "$non_failing" ] || echo
}

do_clean () {
  __grab_ps __ps_before_clean
  [ -z "$__ps_before_clean" ] \
    || { __error "Cannot clean while $_DISP_CUR_COMP_ is running!" ; return 1 ; }

  rm -rfv generated .env
  if [ -d data ] ; then
    echo -n "Remove '$_CUR_COMP_/data' (y/N)? " ; read -r
    [[ $REPLY =~ ^[Yy]$ ]] || return 0
  fi
  rm -rfv data
}

do_down () {
  $DOCKER_COMPOSE_CMD down
}

do_overrides () {
  local any_override=
  while IFS= read -r ofile ; do
    any_override=YES
    printf '[G] ' ; realpath -s --relative-to="$(pwd)/.." "$ofile"
  done < <(find .. -maxdepth 1 -type f -iname '*override*')
  [ -n "$any_override" ] || echo '[-] No global override files.'

  any_override=
  while IFS= read -r ofile ; do
    any_override=YES
    printf '[L] ' ; realpath -s --relative-to="$(pwd)/.." "$ofile"
  done < <(find . -maxdepth 1 -type f -iname '*override*')
  [ -n "$any_override" ] || echo '[-] No local override files.'
}

do_pull () {
  $DOCKER_COMPOSE_CMD pull
}

do_status () {
  __grab_ps __ps_before_status
  printf '[?] Querying service:'
  for svc in $( "$YQ_CMD" -M '.services | keys | .[]' compose.yml ) ; do
    ( echo -n " $svc" ; echo "$__ps_before_status" | grep "$svc" | grep -q "(healthy)" ) \
      || { echo ; __error "Unhealthy service: ${_fg_red_}$svc${_normal_}" ; return 1 ; }
  done
  echo
}

do_up () {
  local all__CUR_COMPOSE_FILES_=()
  for cf in "${_CUR_COMPOSE_FILES_[@]}" "${_CUR_COMPOSE_OVERRIDE_FILES_[@]}" ; do
    all__CUR_COMPOSE_FILES_+=(-f "$cf")
  done
  $DOCKER_COMPOSE_CMD "${all__CUR_COMPOSE_FILES_[@]}" up -d
}

# # # # # # # # # # # # # # # # # # #     OPTIONS PARSING     # # # # # # # # # # # # # # # # # # #

usage () {
  [ $# -eq 0 ] || echo -e "\nERROR: $1" >&2
  local num_comps="$(find . -maxdepth 2 -type f -name compose.yml | wc -l)"
  readarray -t compositions < <(find . -maxdepth 2 -type f -name compose.yml -printf '%h\0' | xargs -0 -I{} basename {})
  echo -e "
Usage:
  $0 <verb>[,<verb>,...] [flags] [options] <comp_dir> [<comp_dir> ...]

Verbs: (short forms within <>)
  <c>lean        Delete '<comp_dir>/data'
  <d>own         Stop a composition
  <o>verrides    List all override files in a composition
  <p>ull         Pull all images for a composition
  <s>tatus       Display health / status of a composition
  <u>p           Start a composition
  <v>alidate     Validate a composition

Flags:
  [-F | --fail-fast]         Fail on the first verb failure
  [-G | --skip-generate]     Use existing '.env' and 'generated/'
  [-O | --skip-overrides]    Ignore overrides in scripts, environments, flags etc.
  [-R | --skip-related]      Ignore verifying/starting sibling compositions

Fragments:            { use | ignore }
  [-d | --devices]    Attach devices listed in 'compose.devices.yml'
  [-g | --logging]    Configure logging as specified in 'compose.logging.yml'
  [-h | --hooks]      Run pre and post hook 'compose.*_hook.sh' scripts
  [-l | --labels]     Use labels specified in 'compose.labels.yml'
  [-p | --ports]      Expose ports listed in 'compose.ports.yml'

 <omitted> = Unless overriden, use the fragment files:
             use 'compose.<fragment>.{sh,yml}' unless overriden in 'meta.override.yml'.
    ignore = Do not use the fragment files (and use docker default instead):
             ignores 'compose.<fragment>.{sh,yml}' file.
       use = Ignore overrides and use the fragment file:
             uses 'compose.<fragment>.{sh,yml}' file ignoring 'meta.override.yml'.

Compositions found ($num_comps):" >&2
  for (( i=0 ; i<${#compositions[@]} ; i++ )) ; do
    printf "%-13s" "${compositions[i]}"
    (( (i + 1) % 7 != 0 )) || printf "\n"
  done >&2
  exit $EXIT_CODE_USAGE_ERROR
}
[ $# -gt 0 ] || usage

expand_verbs () {
  local expanded=
  while read -rn1 char; do
    case "$char" in
      c) expanded="$expanded clean" ;;
      d) expanded="$expanded down" ;;
      o) expanded="$expanded overrides" ;;
      p) expanded="$expanded pull" ;;
      s) expanded="$expanded status" ;;
      u) expanded="$expanded up" ;;
      v) expanded="$expanded validate" ;;
      *) return 1
    esac
  done < <( echo -n "$1" )
  VERBS="$expanded"
}

VERBS="${1//,/ }"
for V in $VERBS ; do
  [ "$V" = clean ] || [ "$V" = down ] || [ "$V" = overrides ] || [ "$V" = pull ] \
    || [ "$V" = status ] || [ "$V" = up ] || [ "$V" = validate ] \
    || expand_verbs "$VERBS" \
    || usage "Unknown verb: $V"
done
shift

for opt in "$@" ; do
  shift
  case "$opt" in
    --fail-fast)       set -- "$@" "-F" ;;
    --skip-generate)   set -- "$@" "-G" ;;
    --skip-overrides)  set -- "$@" "-O" ;;
    --skip-related)    set -- "$@" "-R" ;;

    --devices)         set -- "$@" "-d" ;;
    --hooks)           set -- "$@" "-h" ;;
    --labels)          set -- "$@" "-l" ;;
    --logging)         set -- "$@" "-g" ;;
    --ports)           set -- "$@" "-p" ;;

    --)                set -- "$@" "--" ;;
    --*)               usage "Unrecognized option: $opt." ;;
    *)                 set -- "$@" "$opt"
  esac
done

validate_and_set_fragment () {
  local FRAGMENT="FRAGMENT_$2"
  local FRAGMENT_VALUE="${1,,}"
  case "$FRAGMENT_VALUE" in
    use | ignore ) printf -v "$FRAGMENT" "%s" "$FRAGMENT_VALUE" ; return 0
  esac
  if [ "$3" = override ] ; then
    echo ; __error "Invalid value '$1' for '$2' in $_CUR_COMP_/meta.override.yml"
  else
    usage "Invalid value '$1' for '${2,,}' fragment"
  fi
  return 1
}

OPTIND=1
while getopts ':FGORd:g:h:l:p:' OPTION ; do
  case "$OPTION" in
    F ) FLAG_FAIL_FAST=yes ;;
    G ) FLAG_SKIP_GENERATE=yes ;;
    O ) FLAG_SKIP_OVERRIDES=yes ;;
    R ) FLAG_SKIP_RELATED=yes ;;

    d ) validate_and_set_fragment "$OPTARG" DEVICES usage ;;
    g ) validate_and_set_fragment "$OPTARG" LOGGING usage ;;
    h ) validate_and_set_fragment "$OPTARG" HOOKS usage ;;
    l ) validate_and_set_fragment "$OPTARG" LABELS usage ;;
    p ) validate_and_set_fragment "$OPTARG" PORTS usage ;;

    * ) usage "Unrecognized option: -$OPTARG." ;;
  esac
done
shift $((OPTIND -1))

[ $# -gt 0 ] || { __error "No <comp_dir>' provided!" ; exit $EXIT_CODE_COMPOSITION_NOT_FOUND ; }

# # # # # # # # # # # # # # # # # # #       DEPENDENCIES      # # # # # # # # # # # # # # # # # # #
# FIXME: Improve `podman` support and make it default.

if ! $DOCKER_CMD version &> /dev/null ; then
  if ! podman version &> /dev/null ; then
    __error 'Failed to locate: `docker` or `podman`!' ; exit $EXIT_CODE_DEP_FAILURE
  else
    DOCKER_CMD=podman
  fi
fi

[ -x "$DOCKER_COMPOSE_CMD" ] || "$SCRIPTS_DIR/install-compose.sh" "$LIB_DIR/compose" \
  || { __error 'Failed to locate or download: `'"$DOCKER_CMD"'-compose`!' ; exit $EXIT_CODE_DEP_FAILURE ; }

[ -x "$YQ_CMD" ] || "$SCRIPTS_DIR/install-yq.sh" "$LIB_DIR/yq" \
  || { __error 'Failed to locate or download: `yq`!' ; exit $EXIT_CODE_DEP_FAILURE ; }

# # # # # # # # # # # # # # # # # # #      MAIN FUNCTION      # # # # # # # # # # # # # # # # # # #

COMPOSITIONS=( "$@" )
FRAGMENTS_FROM_ARGS=( "$FRAGMENT_DEVICES" "$FRAGMENT_HOOKS" "$FRAGMENT_LABELS" "$FRAGMENT_LOGGING" "$FRAGMENT_PORTS" )

_FINAL_EXIT_CODE_=0 ; _CUR_STAGE_=0 ; _CUR_YQ_META_QUERY_PFX_=""
unset _CUR_COMP_ _CUR_VERB_ ; __print_sepator_line
for _CUR_COMP_ in "${COMPOSITIONS[@]}" ; do
  _CUR_COMP_="${_CUR_COMP_%/}" ; _DISP_CUR_COMP_="${_bold_}$_CUR_COMP_${_normal_}"
  if ! cd "$SELF_DIR/$_CUR_COMP_" 2>/dev/null ; then
    echo ; __error "$_DISP_CUR_COMP_ is not a base directory at '$SELF_DIR'!"
    __maybe_fail_fast $EXIT_CODE_COMPOSITION_NOT_FOUND || continue
  fi
  if ! [ -f "$SELF_DIR/$_CUR_COMP_/compose.yml" ] ; then
    echo ; __error "No 'compose.yml' found under $_DISP_CUR_COMP_!"
    __maybe_fail_fast $EXIT_CODE_COMPOSITION_NOT_FOUND || continue
  fi

  [ ! -f "meta.override.yml" ] || _CUR_YQ_META_QUERY_PFX_='. *= load("meta.override.yml") | '

  _CUR_COMPOSE_FILES_=( "compose.yml" ) ; _CUR_COMPOSE_OVERRIDE_FILES_=()
  if [ "$FLAG_SKIP_OVERRIDES" != yes ] && [ -f compose.override.yml ] ; then
    _CUR_COMPOSE_OVERRIDE_FILES_=( compose.override.yml)
  fi

  IFS=, read -r FRAGMENT_DEVICES FRAGMENT_HOOKS FRAGMENT_LABELS FRAGMENT_LOGGING FRAGMENT_PORTS \
             <<< "$( IFS=, ; echo "${FRAGMENTS_FROM_ARGS[*]}" )"
  _DISABLED_FRAGMENTS_=() ; frag_error=0
  for frag in DEVICES HOOKS LABELS LOGGING PORTS ; do
    __read_fragment $frag || frag_error=1
  done
  [ "$frag_error" -eq 0 ] || __maybe_fail_fast $EXIT_CODE_FRAGMENTS_ERROR || continue

  for _CUR_VERB_ in $VERBS ; do
    (( ++_CUR_STAGE_ ))
    if __will_do_pre_req ; then
      [ "$_CUR_STAGE_" -gt 1 ] || [ "$COMP_SELF_CALL_DEPTH" -gt 0 ] || echo
      __do_ pre_req "$_CUR_VERB_" || __maybe_fail_fast $EXIT_CODE_VERB_FAILURE || continue
    fi
    [ "$_CUR_VERB_" = validate ] || do_validate non_failing

    _CUR_VERB_PREFIX_="${_CUR_VERB_:0:1}"
    if [ "$COMP_SELF_CALL_DEPTH" -eq 0 ] ; then
      _CUR_VERB_PREFIX_="${_fg_white_}${_bg_blue_}${_bold_} ${_CUR_VERB_PREFIX_^^}"
    else
      _CUR_VERB_PREFIX_="${_fg_white_}${_bg_black_}${_bold_} ${_CUR_VERB_PREFIX_}"
    fi
    echo -ne "\n$_CUR_VERB_PREFIX_ ${_normal_} Executing ${_bold_}$_CUR_VERB_${_normal_} on "
    [ "$COMP_SELF_CALL_DEPTH" -eq 0 ] || printf '%s ' "$COMP_SELF_CALL_REASON"
    echo "$_DISP_CUR_COMP_ ... "
    [ ${#_DISABLED_FRAGMENTS_[@]} -eq 0 ] || echo "[o] Disabled fragments: ${_DISABLED_FRAGMENTS_[*]}"

    if __will_invoke_compose ; then
      __gen_env || __maybe_fail_fast $EXIT_CODE_SETUP_ERROR || continue
      __create_external_networks || __maybe_fail_fast $EXIT_CODE_SETUP_ERROR || continue
      __gen_templates || __maybe_fail_fast $EXIT_CODE_SETUP_ERROR || continue
      [ "$FRAGMENT_HOOKS" != use ] || __run_hooks pre \
        || __maybe_fail_fast $EXIT_CODE_PRE_HOOK_SCRIPT_ERROR || continue
      __show_message pre
    fi

    [ "$FRAGMENT_HOOKS" != use ] || __run_hooks "$_CUR_VERB_" pre \
      || __maybe_fail_fast $EXIT_CODE_PRE_HOOK_SCRIPT_ERROR || continue
    __show_message "$_CUR_VERB_" pre

    ! __will_invoke_compose || __verify_volumes || __maybe_fail_fast $EXIT_CODE_SETUP_ERROR || continue

    verb_ret=0 ; "do_${_CUR_VERB_}" ; verb_ret=$?

    [ "$_CUR_VERB_" != validate ] || [ $verb_ret -ne 0 ] || echo "[=] $_DISP_CUR_COMP_ is valid!"
    [ "$_CUR_VERB_" != status ]  || [ $verb_ret -ne 0 ]  || echo "[=] $_DISP_CUR_COMP_ is healthy!"

    [ $verb_ret -eq 0 ] || __maybe_fail_fast $EXIT_CODE_VERB_FAILURE || continue

    if __will_do_related ; then
      { __do_ related "$_CUR_VERB_" || __maybe_fail_fast $EXIT_CODE_VERB_FAILURE || continue ; } ; echo
    fi

    if __will_invoke_compose ; then
      [ "$FRAGMENT_HOOKS" != use ] || __run_hooks post \
        || __maybe_fail_fast $EXIT_CODE_POST_HOOK_SCRIPT_ERROR || continue
      __show_message post
    fi

    [ "$FRAGMENT_HOOKS" != use ] || __run_hooks "$_CUR_VERB_" post \
      || __maybe_fail_fast $EXIT_CODE_POST_HOOK_SCRIPT_ERROR
    __show_message "$_CUR_VERB_" post
  done
  unset _CUR_VERB_ ; __print_sepator_line
done
[ "$COMP_SELF_CALL_DEPTH" -gt 0 ] || echo
exit "$_FINAL_EXIT_CODE_"
